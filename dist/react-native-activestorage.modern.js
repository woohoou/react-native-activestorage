import t from"rn-fetch-blob";import{btoa as e}from"abab";import r,{createContext as a,useContext as s,useState as o,useCallback as n,useMemo as c}from"react";const i=async({path:r})=>{const a=(await t.fs.hash(r,"md5")).replace(/\r|\n/g,"").replace(/([\da-fA-F]{2}) ?/g,"0x$1 ").replace(/ +$/,"").split(" ").map(t=>parseInt(t)),s=String.fromCharCode(...a);return e(s)};function l(){return(l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a])}return t}).apply(this,arguments)}let d=0;const h=({directUploadsUrl:e,file:r,headers:a,onStatusChange:s})=>{const o=++d;let n,c=!1;const h=()=>{n&&(c=!0,n.cancel())},u=t=>{s(l({},t,{id:o,cancel:h,file:r}))};return u({status:"waiting"}),new Promise(async(s,o)=>{try{const d=await(async({directUploadsUrl:t,file:e,headers:r={}})=>{const a=await i({path:e.path});if(!a)throw new Error(`Failed to get file checksum. Path: ${e.path}`);const s={filename:e.name,content_type:e.type||"image/jpeg",byte_size:e.size,checksum:a};return e.metadata&&(s.metadata=e.metadata),(await fetch(t,{method:"POST",body:JSON.stringify({blob:s}),headers:l({"Content-Type":"application/json"},r)})).json()})({directUploadsUrl:e,file:r,headers:a}),{url:h,headers:p}=d.direct_upload,m=t.wrap(r.path);n=t.fetch("PUT",h,p,m),n.uploadProgress({interval:250},(t,e)=>{u({status:"uploading",progress:t/e*100,totalBytes:e,uploadedBytes:t})}).then(t=>{const e=t.info().status;if(e>=200&&e<400)u({status:"success"}),s(d.signed_id);else{const t=new Error("Response not success");u({status:"error",error:t}),o(t)}}).catch(t=>{u(c?{status:"canceled"}:{status:"error",error:t}),o(t)})}catch(t){return u({status:"error",error:t}),o(t)}})},u=a({host:"http://localhost:3000",mountPath:"/rails/active_storage",headers:{}}),{Provider:p}=u,m=({host:t,mountPath:e,headers:a,children:s})=>r.createElement(p,{value:{host:t,mountPath:e,headers:a}},s),f=({onSuccess:t,onError:e}={})=>{const{directUploadsUrl:r,headers:a}=(()=>{const t=s(u),e=t.mountPath||"/rails/active_storage";return l({},t,{mountPath:e,directUploadsUrl:`${t.host}${e}/direct_uploads`})})(),[i,d]=o([]),p=n(t=>{d(e=>((t,e,r="id")=>{const a=[...t],s=a.findIndex(t=>t[r]===e[r]);return s>=0?a[s]=e:a.push(e),a})(e,t))},[]),m=n(async s=>{try{const e=(await Promise.all(s.map(t=>h({file:t,directUploadsUrl:r,headers:a,onStatusChange:p})))).filter(t=>!!t);return e.length>0&&t&&t({signedIds:e}),{signedIds:e}}catch(t){return e&&e(t),{}}},[r,a,p,t,e]),f=c(()=>i.some(t=>"uploading"===t.status),[i]);return{upload:m,uploads:i,uploading:f}},g=({children:t,onSuccess:e,onError:r})=>t(f({onSuccess:e,onError:r}));export{m as ActiveStorageProvider,g as DirectUpload,i as checksum,h as directUpload,f as useDirectUpload};
//# sourceMappingURL=react-native-activestorage.modern.js.map
